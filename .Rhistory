#install.packages("RPostgreSQL")
require("RPostgreSQL")
# Guardar el Password para poder posteriormente eliminarlo
pw <- { "1796vd"}
# Leer el driver de PostgreSQL
drv <- dbDriver("PostgreSQL")
install.packages("RPostgreSQL")
#install.packages("RPostgreSQL")
require("RPostgreSQL")
# Guardar el Password para poder posteriormente eliminarlo
pw <- { "1796vd"}
# Leer el driver de PostgreSQL
drv <- dbDriver("PostgreSQL")
# Crear la conexion con la base de datos
con <- dbConnect(drv, dbname = "postgres",
host = "localhost", port = 5432,
user = "postgres", password = pw)
# Eliminar el Password
rm(pw)
# Chequear que existe la tabla de la base de datos para comprobar la conexión
dbExistsTable(con, "descripcion_carnet")
library(readr)
library(ISLR)
install.packages("ISLR")
library(readr)
library(ISLR)
library(ggplot2)
library(caret)
library(dplyr)
library(magrittr)
library(tidyverse)
library(rpart)
library(rpart.plot)
install.packages("rpart.plot")
library(readr)
library(ISLR)
library(ggplot2)
library(caret)
library(dplyr)
library(magrittr)
library(tidyverse)
library(rpart)
library(rpart.plot)
#install.packages("RPostgreSQL")
require("RPostgreSQL")
# Guardar el Password para poder posteriormente eliminarlo
pw <- { "1796vd"}
# Leer el driver de PostgreSQL
drv <- dbDriver("PostgreSQL")
# Crear la conexion con la base de datos
con <- dbConnect(drv, dbname = "postgres",
host = "localhost", port = 5432,
user = "postgres", password = pw)
# Eliminar el Password
rm(pw)
# Chequear que existe la tabla de la base de datos para comprobar la conexión
dbExistsTable(con, "descripcion_carnet")
clima <-dbGetQuery(con, "SELECT * FROM descripcion_fecha_accidente_y_su_clima")
head(clima)
acc <-dbGetQuery(con, "SELECT * FROM accidente")
head(acc)
datos<-merge(x = clima, y = acc, by = "id_desc_fecha", all = TRUE)
head(datos)
install.packages(c("hydroTSM", "ISLR", "rpart.plot", "RPostgreSQL"))
install.packages(c("hydroTSM", "ISLR", "rpart.plot", "RPostgreSQL"))
datos1<- datos[,c("id_desc_fecha", "desc_fecha", "id_accidente", "precipitaciones", "temperatura_media", "velocidad_viento_media", "id_desc_dia_semana", "hora")]
datos<-merge(x = clima, y = acc, by = "id_desc_fecha", all = TRUE)
head(datos)
datos1<- datos[,c("id_desc_fecha", "desc_fecha", "id_accidente", "precipitaciones", "temperatura_media", "velocidad_viento_media", "id_desc_dia_semana", "hora")]
datos1<- datos[,c("id_desc_fecha", "desc_fecha", "id_accidente", "precipitaciones", "temperatura_media", "velocidad_viento_media", "id_desc_dia_semana", "hora")]
library(readr)
library(ISLR)
library(ggplot2)
library(caret)
library(dplyr)
library(magrittr)
library(tidyverse)
library(rpart)
library(rpart.plot)
clima <-dbGetQuery(con, "SELECT * FROM descripcion_fecha_accidente_y_su_clima")
head(clima)
acc <-dbGetQuery(con, "SELECT * FROM accidente")
head(acc)
datos<-merge(x = clima, y = acc, by = "id_desc_fecha", all = TRUE)
head(datos)
datos1<- datos[ ,c("id_desc_fecha", "desc_fecha", "id_accidente", "precipitaciones", "temperatura_media", "velocidad_viento_media", "id_desc_dia_semana", "hora")]
datos1<- datos[ .,c("id_desc_fecha", "desc_fecha", "id_accidente", "precipitaciones", "temperatura_media", "velocidad_viento_media", "id_desc_dia_semana", "hora")]
datos1<- datos[ :,c("id_desc_fecha", "desc_fecha", "id_accidente", "precipitaciones", "temperatura_media", "velocidad_viento_media", "id_desc_dia_semana", "hora")]
datos1<- datos[ ,c("id_desc_fecha", "desc_fecha", "id_accidente", "precipitaciones", "temperatura_media", "velocidad_viento_media", "id_desc_dia_semana", "hora")]
datos1<- datos[ ,c(datos$id_desc_fecha, "desc_fecha", "id_accidente", "precipitaciones", "temperatura_media", "velocidad_viento_media", "id_desc_dia_semana", "hora")]
datos1<- datos[ ,"hora"]
datos1<- datos[ ,"hora"]
head(datos1)
datos1<- datos[ ,c("id_desc_fecha", "hora")]
datos1<- datos[ ,c("id_desc_fecha", "hora")]
head(datos1)
datos1<- datos[ ,c("id_desc_fecha", "desc_fecha",  "hora")]
head(datos1)
datos1<- datos[ ,c("id_desc_fecha", "desc_fecha", "id_accidente",  "hora")]
datos1<- datos[ ,c("id_desc_fecha", "desc_fecha",  "hora")]
head(datos1)
datos1<- datos[ ,c("id_desc_fecha", "desc_fecha", "id_desc_dia_semana", "hora")]
head(datos1)
datos1<- datos[ ,c("id_desc_fecha", "desc_fecha",  "velocidad_viento_media", "id_desc_dia_semana", "hora")]
head(datos1)
datos1<- datos[ ,c("id_desc_fecha", "desc_fecha","temperatura_media", "velocidad_viento_media", "id_desc_dia_semana", "hora")]
head(datos1)
datos1<- datos[ ,c("id_desc_fecha", "desc_fecha", "precipitaciones", "temperatura_media", "velocidad_viento_media", "id_desc_dia_semana", "hora")]
head(datos1)
names(datos)
datos1<- datos[ ,c("id_desc_fecha", "desc_fecha", "num_expediente", "precipitaciones", "temperatura_media", "velocidad_viento_media", "id_desc_dia_semana", "hora")]
head(datos1)
for(i in 1:nrow(datos1))
{
if (datos1$hora[i] <=7.0) {
datos1$horario[i]<-"noche"
} else if (datos1$hora[i] >21.0){
datos1$horario[i]<-"noche"
} else {
datos1$horario[i]<-"dia"
}
}
datos1
datos2<- datos1 %>%
group_by(desc_fecha, horario, precipitaciones, temperatura_media, velocidad_viento_media, id_desc_dia_semana) %>%
summarise(cant_accidentes=n())
datos2
?summarise
library(hydroTSM)
for(i in 1:nrow(datos2))
{datos2$estacion <- time2season(datos2$desc_fecha, out.fmt = "seasons")
}
datos2
for(i in 1:nrow(datos2))
{
if (!is.na(datos2$precipitaciones[i])) {
if (datos2$precipitaciones[i] ==0.0) {
datos2$precipitacion[i]<-"No llueve"
} else if (datos2$precipitaciones[i] <=25.0){
datos2$precipitacion[i]<-"Lluvia debil"
} else if (datos2$precipitaciones[i] <=50.0){
datos2$precipitacion[i]<-"Lluvia moderada"
} else {
datos2$precipitacion[i]<-"Lluvia fuerte"
}}}
datos2
for(i in 1:nrow(datos2))
{
if (!is.na(datos2$temperatura_media[i])) {
if (datos2$temperatura_media[i] < 8.0) {
datos2$temperatura[i]<-"Muy frio"
} else if (datos2$temperatura_media[i] < 16.0){
datos2$temperatura[i]<-"Frio"
} else if (datos2$temperatura_media[i] < 24.0){
datos2$temperatura[i]<-"Calido"
} else {
datos2$temperatura[i]<-"Muy caliente"
}}}
datos2
for(i in 1:nrow(datos2))
{
if (!is.na(datos2$velocidad_viento_media[i])) {
if (datos2$velocidad_viento_media[i] < 4.0) {
datos2$viento[i]<-"Bajo"
} else if (datos2$velocidad_viento_media[i] < 8.0){
datos2$viento[i]<-"Medio"
} else {
datos2$viento[i]<-"Alto"
}}}
datos2
datos3<- datos2[,c("desc_fecha", "horario", "cant_accidentes", "id_desc_dia_semana", "estacion", "precipitacion", "temperatura", "viento")]
head(datos3)
unique(datos3$horario)
datos3$horario<-ifelse(datos3$horario == "dia", 1, datos3$horario)
datos3$horario<-ifelse(datos3$horario == "noche", 0, datos3$horario)
datos3$horario<-ifelse(datos3$horario == "dia", 1, datos3$horario)
datos3$horario<-ifelse(datos3$horario == "noche", 0, datos3$horario)
unique(datos3$horario)
unique(datos3$estacion)
datos3$estacion<-ifelse(datos3$estacion == "winter", 0, datos3$estacion)
datos3$estacion<-ifelse(datos3$estacion == "spring", 1, datos3$estacion)
datos3$estacion<-ifelse(datos3$estacion == "summer", 2, datos3$estacion)
datos3$estacion<-ifelse(datos3$estacion == "autumm", 3, datos3$estacion)
unique(datos3$estacion)
unique(datos3$precipitacion)
datos3$precipitacion<-ifelse(datos3$precipitacion == "No llueve", 0, datos3$precipitacion)
datos3$precipitacion<-ifelse(datos3$precipitacion == "Lluvia debil", 1, datos3$precipitacion)
datos3$precipitacion<-ifelse(datos3$precipitacion == "Lluvia moderada", 2, datos3$precipitacion)
datos3$precipitacion<-ifelse(datos3$precipitacion == "Lluvia fuerte", 3, datos3$precipitacion)
unique(datos3$precipitacion)
unique(datos3$temperatura)
datos3$temperatura<-ifelse(datos3$temperatura == "Muy frio", 0, datos3$temperatura)
datos3$temperatura<-ifelse(datos3$temperatura == "Frio", 1, datos3$temperatura)
datos3$temperatura<-ifelse(datos3$temperatura == "Calido", 2, datos3$temperatura)
datos3$temperatura<-ifelse(datos3$temperatura == "Muy caliente", 3, datos3$temperatura)
unique(datos3$temperatura)
unique(datos3$viento)
datos3$viento<-ifelse(datos3$viento == "Bajo", 0, datos3$viento)
datos3$viento<-ifelse(datos3$viento == "Medio", 1, datos3$viento)
datos3$viento<-ifelse(datos3$viento == "Alto", 2, datos3$viento)
unique(datos3$viento)
dia_sem <-dbGetQuery(con, "SELECT * FROM descripcion_dia_semana_accidente")
dia_sem
datos3$id_desc_dia_semana<-ifelse(datos3$id_desc_dia_semana == 1, 2, datos3$id_desc_dia_semana)
datos3$id_desc_dia_semana<-ifelse(datos3$id_desc_dia_semana == 2, 6, datos3$id_desc_dia_semana)
datos3$id_desc_dia_semana<-ifelse(datos3$id_desc_dia_semana == 3, 3, datos3$id_desc_dia_semana)
datos3$id_desc_dia_semana<-ifelse(datos3$id_desc_dia_semana == 4, 5, datos3$id_desc_dia_semana)
datos3$id_desc_dia_semana<-ifelse(datos3$id_desc_dia_semana == 5, 4, datos3$id_desc_dia_semana)
datos3$id_desc_dia_semana<-ifelse(datos3$id_desc_dia_semana == 6, 7, datos3$id_desc_dia_semana)
datos3$id_desc_dia_semana<-ifelse(datos3$id_desc_dia_semana == 7, 1, datos3$id_desc_dia_semana)
str(datos3)
datos3$horario<- as.numeric(datos3$horario)
datos3$estacion<-as.numeric(datos3$estacion)
datos3$precipitacion<-as.numeric(datos3$precipitacion)
datos3$temperatura<-as.numeric(datos3$temperatura)
datos3$viento<-as.numeric(datos3$viento)
datos3$cant_accidentes<-as.numeric(datos3$cant_accidentes)
str(datos3)
names(datos3)
cor.test(datos3$temperatura,datos3$cant_accidentes, method = "pearson")
set.seed(12)
dataset <- createDataPartition(y = datos3$cant_accidentes,  p= 0.8, list = FALSE)
training <- datos[dataset,]
testing <- datos[-dataset,]
set.seed(12)
dataset <- createDataPartition(y = datos3$cant_accidentes,  p= 0.8, list = FALSE)
training <- datos[dataset,]
testing <- datos[-dataset,]
training
testing
?createDataPartition
set.seed(12)
dataset <- createDataPartition(y = datos3$cant_accidentes,  p= 0.8, list = FALSE)
dataset
set.seed(12)
dataset <- createDataPartition(y = datos3$cant_accidentes,  p= 0.8, list = FALSE)
training <- datos[dataset,]
testing <- datos[-dataset,]
training
set.seed(12)
dataset <- createDataPartition(y = datos3$cant_accidentes,  p= 0.2, list = FALSE)
training <- datos[dataset,]
testing <- datos[-dataset,]
training
testing
set.seed(12)
dataset <- createDataPartition(y = datos3$cant_accidentes,  p= 0.2, list = FALSE)
training <- datos[dataset,]
testing <- datos[-dataset,]
testing
set.seed(12)
dataset <- createDataPartition(y = datos3$cant_accidentes,  p= 0.8, list = FALSE)
training <- datos[dataset,]
testing <- datos[-dataset,]
testing
set.seed(12)
dataset <- createDataPartition(y = datos3$cant_accidentes,  p= 0.8, list = FALSE)
training <- datos[-dataset,]
testing <- datos[dataset,]
training
testing
set.seed(12)
dataset <- createDataPartition(y = datos3$cant_accidentes,  p= 0.8, list = FALSE)
training <- datos[-dataset,]
testing <- datos[dataset,]
# Base entrenamiento
X_train = training[-cant_accidentes]
library(tidyverse)
library(xgboost)
# En Función a AT
set.seed(12)
partir <- createDataPartition(y = datos$AT,  p= 0.7, list = FALSE)
set.seed(12)
n = nrow(datos3)
#frac_train <- .75
#mascara <- sample(c(rep("train", n * frac_train), rep("validation", n * (1 - frac_train))), n)
#train_val <- split(mtcars, mascara)s
set.seed(12)
n = nrow(datos3)
n
#frac_train <- .75
#mascara <- sample(c(rep("train", n * frac_train), rep("validation", n * (1 - frac_train))), n)
#train_val <- split(mtcars, mascara)s
set.seed(12)
n = nrow(datos3)
frac_train <- .75
mascara <- sample(c(rep("train", n * frac_train), rep("validation", n * (1 - frac_train))), n)
entrevali <- split(mtcars, mascara)s
set.seed(12)
n = nrow(datos3)
frac_train <- .75
mascara <- sample(c(rep("train", n * frac_train), rep("validation", n * (1 - frac_train))), n)
entrevali <- split(mtcars, mascara)
set.seed(12)
n = nrow(datos3)
frac_train <- .5
mascara <- sample(c(rep("train", n * frac_train), rep("validation", n * (1 - frac_train))), n)
entrevali <- split(mtcars, mascara)
set.seed(12)
n = nrow(datos3)
frac_train <- .1
mascara <- sample(c(rep("train", n * frac_train), rep("validation", n * (1 - frac_train))), n)
set.seed(12)
n = nrow(datos3)
frac_train <- .5
mascara <- sample(c(rep("train", n * frac_train), rep("validation", n * (1 - frac_train))), n)
entrevali <- split(datos3, mascara)
entrevali$train
entrevali$test
set.seed(12)
n = nrow(datos3)
frac_train <- .5
mascara <- sample(c(rep("train", n * frac_train), rep("validation", n * (1 - frac_train))), n)
entrevali <- split(datos3, mascara)
entrevali$test
set.seed(12)
n = nrow(datos3)
frac_train <- .5
mascara <- sample(c(rep("train", n * frac_train), rep("test", n * (1 - frac_train))), n)
entrevali <- split(datos3, mascara)
entrevali$
set.seed(12)
n = nrow(datos3)
frac_train <- .5
mascara <- sample(c(rep("train", n * frac_train), rep("test", n * (1 - frac_train))), n)
entrevali <- split(datos3, mascara)
entrevali$test
set.seed(12)
n = nrow(datos3)
frac_train <- .5
mascara <- sample(c(rep("train", n * frac_train), rep("test", n * (1 - frac_train))), n)
entrevali <- split(datos3, mascara)
entrevali$train
set.seed(12)
n = nrow(datos3)
frac_train <- .75
mascara <- sample(c(rep("train", n * frac_train), rep("test", n * (1 - frac_train))), n)
entrevali <- split(datos3, mascara)
entrevali$train
set.seed(12)
n = nrow(datos3)
frac_train <- .75
mascara <- sample(c(rep("train", n * frac_train), rep("test", n * (1 - frac_train))), n)
entrevali <- split(datos3, mascara)
entrevali$test
#• cor.test(datos3$temperatura,datos3$cant_accidentes, method = "pearson")
pairs(datos3)
modelo<- lm(data=entrevali$train, formula= cant_accidentes ~ id_desc_dia_semana + temperatura + horario + estacion + viento + precipitacion)
summary(modelo)
modelo<- lm(data=entrevali$train, formula= cant_accidentes ~ id_desc_dia_semana + temperatura  + estacion + viento + precipitacion)
summary(modelo)
modelo<- lm(data=entrevali$train, formula= cant_accidentes ~ id_desc_dia_semana + temperatura + horario + estacion + viento + precipitacion)
summary(modelo)
summary(modelo)$coefficient
modelo1<-lm(cant_accidentes ~ id_desc_dia_semana + temperatura + horario + estacion, data = entrevali$train)
summary(modelo1)
predict(modelo1, entrevali$test)
preds <- predict(modelo1, entrevali$test)
preds <- predict(modelo1, entrevali$test)
real <- entrevali$test$cant_accidentes
plot(real, preds)
preds <- predict(modelo1, entrevali$test)
real <- entrevali$test$cant_accidentes
plot(real, preds , col = "grey")
abline(modelo, col = "red")
preds <- predict(modelo1, entrevali$test)
real <- entrevali$test$cant_accidentes
plot(real, preds)
abline(modelo, col = "red")
library(randomForest)
rF <- randomForest(cant_accidentes ~ . , data = entrevali$train)
library(randomForest)
rF <- randomForest(cant_accidentes ~ . , data = entrevali$train)
names(rF)
rF$importance
library(randomForest)
norm <- scale(entrevali$train)
library(randomForest)
rF <- randomForest(cant_accidentes ~ . , data = norm )
library(randomForest)
rF <- randomForest(cant_accidentes ~ . , data = entrevali$train )
rF$importance
varImpPlot(rF)
library(randomForest)
norma <- entrevali$train
norma$desc_fecha <- NULL
library(randomForest)
norma <- entrevali$train
norma$desc_fecha <- NULL
norma
library(randomForest)
norma <- entrevali$train
norma$desc_fecha <- NULL
norma <- scale(norma)
rF <- randomForest(cant_accidentes ~ . , data = entrevali$train )
rF$importance
varImpPlot(rF)
library(randomForest)
norma <- entrevali$train
norma$desc_fecha <- NULL
norma$horario <- NULL
norma <- scale(norma)
rF <- randomForest(cant_accidentes ~ . , data = entrevali$train )
rF$importance
varImpPlot(rF)
library(randomForest)
norma <- entrevali$train
norma$desc_fecha <- NULL
norma$horario <- NULL
norma <- scale(norma)
rF <- randomForest(cant_accidentes ~ . , data = entrevali$train )
rF$importance
varImpPlot(rF)
library(randomForest)
norma <- entrevali$train
norma$desc_fecha <- NULL
norma$horario <- NULL
norma <- scale(norma)
rF <- randomForest(cant_accidentes ~ . , data = norma )
rF$importance
varImpPlot(rF)
datos3$horario <- as.numeric(datos3$horario)
datos3$estacion <-as.factor(datos3$estacion)
datos3$precipitacion <-as.factor(datos3$precipitacion)
datos3$temperatura <-as.factor(datos3$temperatura)
datos3$viento <-as.factor(datos3$viento)
datos3$cant_accidentes <-as.numeric(datos3$cant_accidentes)
datos3$horario <- as.numeric(datos3$horario)
datos3$estacion <-as.factor(datos3$estacion)
datos3$precipitacion <-as.factor(datos3$precipitacion)
datos3$temperatura <-as.factor(datos3$temperatura)
datos3$viento <-as.factor(datos3$viento)
datos3$cant_accidentes <-as.numeric(datos3$cant_accidentes)
str(datos3)
names(datos3)
set.seed(12)
n = nrow(datos3)
frac_train <- .75
mascara <- sample(c(rep("train", n * frac_train), rep("test", n * (1 - frac_train))), n)
entrevali <- split(datos3, mascara)
entrevali$test
library(randomForest)
norma <- entrevali$train
norma$desc_fecha <- NULL
norma$horario <- NULL
norma <- scale(norma)
names(norma)
library(randomForest)
norma <- entrevali$train
norma$desc_fecha <- NULL
norma$horario <- NULL
rF <- randomForest(cant_accidentes ~ . , data = norma )
rF$importance
varImpPlot(rF)
names(norma)
library(randomForest)
norma <- entrevali$train
norma$desc_fecha <- NULL
norma$horario <- NULL
rF <- randomForest(cant_accidentes ~ . , data = norma )
rF$importance
varImpPlot(rF)
#• cor.test(datos3$temperatura,datos3$cant_accidentes, method = "pearson")
pairs(datos3)
